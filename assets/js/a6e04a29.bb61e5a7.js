"use strict";(self.webpackChunkconcrete_form_doc=self.webpackChunkconcrete_form_doc||[]).push([[78],{6426:function(e,t,n){n.d(t,{ZP:function(){return a}});var o=n(3117),r=(n(7294),n(3905));const l={toc:[]},s="wrapper";function a(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ci.appveyor.com/project/kegi/html5/history"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/appveyor/build/kegi/html5?style=flat-square",alt:null}))," ",(0,r.kt)("a",{parentName:"p",href:"https://coveralls.io/github/concrete-form/html5"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/coveralls/github/concrete-form/html5?style=flat-square",alt:null}))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Github repo:")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/concrete-form/html5"},"https://github.com/concrete-form/html5")))}a.isMDXComponent=!0},5047:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return c}});var o=n(3117),r=(n(7294),n(3905)),l=n(6426);const s={title:"Install & Setup",hide_title:!0,pagination_prev:null},a=void 0,i={unversionedId:"controls/tailwind-css/intro",id:"controls/tailwind-css/intro",title:"Install & Setup",description:"Tailwind CSS",source:"@site/docs/controls/tailwind-css/intro.mdx",sourceDirName:"controls/tailwind-css",slug:"/controls/tailwind-css/intro",permalink:"/docs/controls/tailwind-css/intro",draft:!1,editUrl:"https://github.com/concrete-form/concrete-form-docs/docs/controls/tailwind-css/intro.mdx",tags:[],version:"current",frontMatter:{title:"Install & Setup",hide_title:!0,pagination_prev:null},sidebar:"docs",next:{title:"API",permalink:"/docs/controls/tailwind-css/api"}},p={},c=[{value:"Install",id:"install",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"setup",id:"setup",level:2},{value:"Styles",id:"styles",level:3},{value:"Apply Tailwind CSS classes to the controls",id:"apply-tailwind-css-classes-to-the-controls",level:3},{value:"Example",id:"example",level:4},{value:"Template to customize CSS classes",id:"template-to-customize-css-classes",level:4}],m={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{style:{marginBottom:0}},"Tailwind CSS"),(0,r.kt)("em",null,"(uses HTML5 implementation)"),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)(l.ZP,{mdxType:"Header"}),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @concrete-form/html5\n# or with NPM :\nnpm install @concrete-form/html5\n")),(0,r.kt)("p",null,"Not sure which version to install ? ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/install#choosing-the-right-version"},"check this")),(0,r.kt)("h2",{id:"dependencies"},"Dependencies"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"tailwindcss")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tailwindcss.com/docs/installation/framework-guides"},"Get started with Tailwind CSS"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"@tailwindcss/forms")," (recommended)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Provides a basic reset for form styles that makes form elements easy to override with utilities.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/tailwindlabs/tailwindcss-forms"},"github.com/tailwindlabs/tailwindcss-forms")),(0,r.kt)("h2",{id:"setup"},"setup"),(0,r.kt)("h3",{id:"styles"},"Styles"),(0,r.kt)("p",null,"Forms global CSS"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Adds red color for errors (feel free to change it)"),(0,r.kt)("li",{parentName:"ul"},"Handles the position of the label (left, right, top or bottom)"),(0,r.kt)("li",{parentName:"ul"},"Handles orientation of the group of items (horizontally or vertically)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* errors */\n\n.concreteform-control [aria-invalid=true] {\n  @apply border-red-600 text-red-600 focus:border-red-600 focus:ring-red-600;\n  @apply dark:border-red-500 dark:text-red-500 dark:focus:border-red-500 dark:focus:ring-red-500;\n}\n.concreteform-control-errors {\n  @apply list-none m-0 p-1 text-sm text-red-600;\n  @apply dark:text-red-500;\n}\n\n/* positionning */\n\n.concreteform-left {\n  @apply flex flex-row-reverse justify-start;\n}\n.concreteform-right {\n  @apply flex flex-row;\n}\n.concreteform-top {\n  @apply flex flex-col-reverse;\n}\n.concreteform-bottom {\n  @apply flex flex-col;\n}\n\n/* items group (radio / checkbox items) */\n\n.concreteform-items-group {\n  @apply flex;\n}\n.concreteform-items-group-horizontal {\n  @apply flex-row;\n}\n.concreteform-items-group-vertical {\n  @apply flex-col;\n}\n")),(0,r.kt)("h3",{id:"apply-tailwind-css-classes-to-the-controls"},"Apply Tailwind CSS classes to the controls"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"We ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/setup"},"recommend re-exporting form components"),".",(0,r.kt)("br",null),"This is especially useful for Tailwind implementation to set default CSS classes!")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://flowbite.com/"},"Flowbite")," is a collection of components.",(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/p/sandbox/zealous-dew-s787p1?file=%2Fsrc%2FApp.tsx"},"Flowbite demo - codesandbox")),(0,r.kt)("h4",{id:"template-to-customize-css-classes"},"Template to customize CSS classes"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"src/components/Form.tsx")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import CfLabelledControl, { LabelledControlProps } from '@concrete-form/html5/LabelledControl'\nimport CfInput, { InputProps } from '@concrete-form/html5/Input'\nimport CfDateTime, { DateTimeProps } from '@concrete-form/html5/DateTime'\nimport CfFileInput, { FileInputProps } from '@concrete-form/html5/FileInput'\nimport CfSelect, { SelectProps } from '@concrete-form/html5/Select'\nimport CfSingleCheckbox, { SingleCheckboxProps } from '@concrete-form/html5/SingleCheckbox'\nimport CfSlider, { SliderProps } from '@concrete-form/html5/Slider'\nimport CfTextarea, { TextareaProps } from '@concrete-form/html5/Textarea'\nimport CfToggleSwitch, { ToggleSwitchProps } from '@concrete-form/html5/ToggleSwitch'\nimport CfCheckboxGroup, { CheckboxGroupProps } from '@concrete-form/html5/CheckboxGroup'\nimport CfRadioGroup, { RadioGroupProps } from '@concrete-form/html5/RadioGroup'\nimport CfSubmitButton, { SubmitButtonProps } from '@concrete-form/html5/SubmitButton'\n\nexport { default } from '@concrete-form/react-hook-form/Form'\n\nexport const LabelledControl: React.FC<LabelledControlProps> = ({ label, ...props }) => (\n  <CfLabelledControl\n    label={<div className=\"...\">{ label }</div>}\n    labelContainerProps={{ className: '...' }}\n    controlContainerProps={{ className: '...' }}\n    {...props}\n  />\n)\n\nexport const Input: React.FC<InputProps> = props => (\n  <CfInput\n    className=\"...\"\n    {...props}\n  />\n)\n\nexport const DateTime: React.FC<DateTimeProps> = props => (\n  <CfDateTime\n    className=\"...\"\n    {...props}\n  />\n)\n\nexport const FileInput: React.FC<FileInputProps> = props => (\n  <CfFileInput\n    className=\"...\"\n    {...props}\n  />\n)\n\nexport const Select: React.FC<SelectProps> = props => (\n  <CfSelect\n    className=\"...\"\n    {...props}\n  />\n)\n\nexport const SingleCheckbox: React.FC<SingleCheckboxProps> = ({ label, ...props }) => (\n  <CfSingleCheckbox\n    label={<div className=\"...\">{ label }</div>}\n    className=\"...\"\n    {...props}\n  />\n)\n\nexport const Slider: React.FC<SliderProps> = props => (\n  <CfSlider\n    className=\"...\"\n    {...props}\n  />\n)\n\nexport const Textarea: React.FC<TextareaProps> = props => (\n  <CfTextarea\n    className=\"...\"\n    {...props}\n  />\n)\n\nexport const ToggleSwitch: React.FC<ToggleSwitchProps> = ({ label, ...props }) => (\n  <CfToggleSwitch\n    label={<div className=\"...\">{ label }</div>}\n    className=\"...\"\n    toggleSwitchContainerProps={{ className: '...' }}\n    toggleSwitchSliderProps={{ className: '...' }}\n    {...props}\n  />\n)\n\nexport const CheckboxGroup: React.FC<CheckboxGroupProps> = props => {\n  return (\n    <CfCheckboxGroup\n      className=\"...\"\n      itemLabelContainerProps={({ disabled = false }) => ({\n        className: disabled\n          ? '...'\n          : '...',\n      })}\n      {...props}\n    />\n  )\n}\n\nexport const RadioGroup: React.FC<RadioGroupProps> = props => {\n  return (\n    <CfRadioGroup\n      className=\"...\"\n      itemLabelContainerProps={({ disabled = false }) => ({\n        className: disabled\n          ? '...'\n          : '...',\n      })}\n      {...props}\n    />\n  )\n}\n\nexport const SubmitButton: React.FC<SubmitButtonProps> = props => (\n  <CfSubmitButton\n    className=\"...\"\n    {...props}\n  />\n)\n\n")))}u.isMDXComponent=!0}}]);